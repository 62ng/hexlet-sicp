<?php

return [
    'title' => "Изменение компилятора с явным кодированием",
    'description' => [
        '1' =>
        "В этом разделе мы в основном говорили о том, как с помощью окружения времени компиляции порождать лексические адреса. Однако такие окружения можно использовать и другими способами. Например, в упражнении ",
        '2' =>
        " мы повысили эффективность скомпилированного кода путем явного кодирования элементарных процедур. Наша реализация обрабатывала имена явно кодируемых процедур как зарезервированные слова. Если бы какая-либо программа переопределяла такое имя, механизм, описанный в упражнении ",
        '3' =>
        ", продолжал бы явно кодировать его как примитив и игнорировал бы новое связывание. Рассмотрим, например, процедуру",
        '4' =>
        "которая вычисляет линейную комбинацию ",
        '5' =>
        " и ",
        '6' =>
        ". Мы могли бы вызвать такую процедуру с аргументами ",
        '7' =>
        ", ",
        '8' =>
        " и четырьмя матрицами, но явно кодирующий компилятор по-прежнему вставлял бы код для ",
        '9' =>
        " и ",
        '10' =>
        " в ",
        '11' =>
        " как для примитивов ",
        '12' =>
        " и ",
        '13' =>
        ". Измените компилятор с явным кодированием так, чтобы он проверял окружение времени компиляции и на его основе порождал правильный код для выражений, в которых встречаются имена элементарных процедур. (Код будет работать правильно, пока программа не применяет к этим именам ",
        '14' =>
        " или ",
        '15' =>
        ".)",
    ],
];
