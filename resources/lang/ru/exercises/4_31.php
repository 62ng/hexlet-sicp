<?php

return [
    'title' => 'Поведение ленивого интерпретатора',
    'description' => [
        '1' =>
        "Подход, принятый в этом разделе, нехорош тем, что вносит изменение в Scheme, не сохраняя ее " .
        "семантику. Было бы приятнее реализовать ленивые вычисления как совместимое расширение " .
        "(upward-compatible extension), то есть так, чтобы обычные программы на Scheme работали как прежде. " .
        "Этого можно добиться, расширив синтаксис определений процедур, так, чтобы пользователь мог решать, нужно " .
        "ли задерживать аргументы. При этом можно еще предоставить пользователю выбор между задержкой с " .
        "мемоизацией и без нее. Например, определение",
        '2' =>
        "делало бы ",
        '3' =>
        " процедурой от четырех аргументов, причем первый и третий вычисляются при вызове " .
        "процедуры, второй задерживается, а четвертый задерживается и мемоизируется. Таким образом, обыкновенные " .
        "определения процедур будут задавать такое же поведение, как в обычной Scheme, а добавление декларации ",
        '4' =>
        " к каждому параметру каждой составной процедуры приведет к поведению, как у ленивого " .
        "интерпретатора, описанного в этом разделе. Разработайте и реализуйте изменения, с помощью которых " .
        "можно получить такое расширение Scheme. Вам придется реализовать новые синтаксические процедуры для " .
        "нового синтаксиса ",
        '5' =>
        ". Кроме того, надо будет добиться, чтобы ",
        '6' =>
        " и ",
        '7' =>
        " определяли, когда надо " .
        "задерживать аргументы, и соответствующим образом задерживали и вынуждали их. Наконец, придется " .
        "обеспечить, чтобы вынуждение было с мемоизацией или без оной, смотря по обстоятельствам.",
    ],
];
